;IR code
;LABEL main
;LINK
;STOREI 1 $T1
;STOREI $T1 $L1
;STOREI 2 $T2
;STOREI $T2 $L2
;STOREI 10 $T3
;STOREI $T3 $L3
;STOREI 20 $T4
;STOREI $T4 $L4
;WRITEI $L1
;WRITEI $L2
;WRITEI $L3
;WRITEI $L4
;ADDI $L1 $L2 $T5
;STOREI $T5 $L1
;WRITEI $L1
;MULTI $L1 $L3 $T6
;STOREI $T6 $L2
;WRITEI $L2
;STOREI 0 $T7
;SUBI $T7 $L1 $T8
;ADDI $T8 $L2 $T9
;STOREI $T9 $L3
;WRITEI $L3
;STOREI 0 $T10
;SUBI $T10 $L4 $T11
;STOREI $T11 $L4
;WRITEI $L4
;ADDI $L1 $L2 $T12
;ADDI $L4 $L3 $T13
;MULTI $T12 $T13 $T14
;ADDI $L1 $L2 $T15
;ADDI $T15 $L3 $T16
;ADDI $T16 $L4 $T17
;DIVI $T17 $L1 $T18
;SUBI $T14 $T18 $T19
;STOREI $T19 $L1
;WRITEI $L1
;STOREI 10 $T20
;ADDI $L1 $T20 $T21
;STOREI $T21 $L1
;WRITEI $L1
;ADDI $L2 $L1 $T22
;STOREI 10 $T23
;ADDI $T22 $T23 $T24
;STOREI $T24 $L2
;WRITEI $L2
;STOREI 0 $T25
;STOREI 10 $T26
;SUBI $T25 $T26 $T27
;STOREI $T27 $L3
;WRITEI $L3
;STOREF 1.0 $T28
;STOREF $T28 $L5
;STOREF 2.0 $T29
;STOREF $T29 $L6
;STOREF 3.14159 $T30
;STOREF $T30 $L7
;WRITEF $L5
;WRITEF $L7
;WRITEF $L6
;STOREF 2.0 $T31
;DIVF $L7 $T31 $T32
;STOREF $T32 $L5
;DIVF $L7 $L6 $T33
;STOREF $T33 $L6
;WRITEF $L5
;WRITEF $L6
;ADDF $L5 $L6 $T34
;ADDF $T34 $L7 $T35
;DIVF $T35 $L7 $T36
;STOREF $T36 $L8
;WRITEF $L8
;MULTF $L8 $L8 $T37
;STOREF $T37 $L8
;WRITEF $L8
;ADDF $L8 $L7 $T38
;ADDF $T38 $L8 $T39
;STOREF 2.0 $T40
;DIVF $L8 $T40 $T41
;ADDF $T39 $T41 $T42
;STOREF 4.0 $T43
;DIVF $L7 $T43 $T44
;ADDF $T42 $T44 $T45
;STOREF 5.0 $T46
;DIVF $L7 $T46 $T47
;ADDF $T45 $T47 $T48
;STOREF 6.0 $T49
;DIVF $L7 $T49 $T50
;ADDF $T48 $T50 $T51
;STOREF 7.0 $T52
;DIVF $L7 $T52 $T53
;ADDF $T51 $T53 $T54
;STOREF $T54 $L8
;WRITEF $L8
;RET

;performed CSE on: ADDI $L1 $L2 $T15, the available expression was: ADDI $L1 $L2 $T12, after CSE statement is: STOREI $T12 $T15
;tiny code
push
push r0
push r1
push r2
push r3
jsr main
sys halt
;LABEL main	 live vars: 
label main
;LINK	 live vars: 
link 62
;STOREI 1 $T1	 live vars: $T1, 
;ensure(): $T1 gets register r3 { r0->null r1->null r2->null r3->$T1 }
move 1 r3
;STOREI $T1 $L1	 live vars: $L1, 
;ensure(): $T1 has register r3 { r0->null r1->null r2->null r3->$T1 }
;ensure(): $L1 gets register r2 { r0->null r1->null r2->$L1 r3->$T1 }
move r3 r2
;Freeing unused variable $T1
;Spilling variable: $T1
move r3 $-9
;STOREI 2 $T2	 live vars: $T2, $L1, 
;ensure(): $T2 gets register r3 { r0->null r1->null r2->$L1 r3->$T2 }
move 2 r3
;STOREI $T2 $L2	 live vars: $L1, $L2, 
;ensure(): $T2 has register r3 { r0->null r1->null r2->$L1 r3->$T2 }
;ensure(): $L2 gets register r1 { r0->null r1->$L2 r2->$L1 r3->$T2 }
move r3 r1
;Freeing unused variable $T2
;Spilling variable: $T2
move r3 $-10
;STOREI 10 $T3	 live vars: $T3, $L1, $L2, 
;ensure(): $T3 gets register r3 { r0->null r1->$L2 r2->$L1 r3->$T3 }
move 10 r3
;STOREI $T3 $L3	 live vars: $L1, $L2, $L3, 
;ensure(): $T3 has register r3 { r0->null r1->$L2 r2->$L1 r3->$T3 }
;ensure(): $L3 gets register r0 { r0->$L3 r1->$L2 r2->$L1 r3->$T3 }
move r3 r0
;Freeing unused variable $T3
;Spilling variable: $T3
move r3 $-11
;STOREI 20 $T4	 live vars: $T4, $L1, $L2, $L3, 
;ensure(): $T4 gets register r3 { r0->$L3 r1->$L2 r2->$L1 r3->$T4 }
move 20 r3
;STOREI $T4 $L4	 live vars: $L1, $L2, $L3, $L4, 
;ensure(): $T4 has register r3 { r0->$L3 r1->$L2 r2->$L1 r3->$T4 }
;allocate() has to spill $L3
;Spilling variable: $L3
move r0 $-3
;ensure(): $L4 gets register r0 { r0->$L4 r1->$L2 r2->$L1 r3->$T4 }
move r3 r0
;Freeing unused variable $T4
;Spilling variable: $T4
move r3 $-12
;WRITEI $L1	 live vars: $L2, $L3, $L4, $L1, 
;ensure(): $L1 has register r2 { r0->$L4 r1->$L2 r2->$L1 r3->null }
sys writei r2
;WRITEI $L2	 live vars: $L3, $L4, $L1, $L2, 
;ensure(): $L2 has register r1 { r0->$L4 r1->$L2 r2->$L1 r3->null }
sys writei r1
;WRITEI $L3	 live vars: $L4, $L1, $L2, $L3, 
;ensure(): $L3 gets register r3 { r0->$L4 r1->$L2 r2->$L1 r3->$L3 }
;loading $L3 to register r3
move $-3 r3
sys writei r3
;WRITEI $L4	 live vars: $L1, $L2, $L3, $L4, 
;ensure(): $L4 has register r0 { r0->$L4 r1->$L2 r2->$L1 r3->$L3 }
sys writei r0
;ADDI $L1 $L2 $T5	 live vars: $T5, $L3, $L4, 
;ensure(): $L1 has register r2 { r0->$L4 r1->$L2 r2->$L1 r3->$L3 }
;ensure(): $L2 has register r1 { r0->$L4 r1->$L2 r2->$L1 r3->$L3 }
;Switching owner of register r2 to $T5 { r0->$L4 r1->$L2 r2->$L1 r3->$L3 }
;Spilling variable: $L1
move r2 $-1
addi r1 r2
;Freeing unused variable $L2
;Spilling variable: $L2
move r1 $-2
;STOREI $T5 $L1	 live vars: $L1, $L3, $L4, 
;ensure(): $T5 has register r2 { r0->$L4 r1->null r2->$T5 r3->$L3 }
;ensure(): $L1 gets register r1 { r0->$L4 r1->$L1 r2->$T5 r3->$L3 }
move r2 r1
;Freeing unused variable $T5
;Spilling variable: $T5
move r2 $-13
;WRITEI $L1	 live vars: $L1, $L3, $L4, 
;ensure(): $L1 has register r1 { r0->$L4 r1->$L1 r2->null r3->$L3 }
sys writei r1
;MULTI $L1 $L3 $T6	 live vars: $T6, $L1, $L4, 
;ensure(): $L1 has register r1 { r0->$L4 r1->$L1 r2->null r3->$L3 }
;ensure(): $L3 has register r3 { r0->$L4 r1->$L1 r2->null r3->$L3 }
;Switching owner of register r1 to $T6 { r0->$L4 r1->$L1 r2->null r3->$L3 }
;Spilling variable: $L1
move r1 $-1
muli r3 r1
;Freeing unused variable $L3
;STOREI $T6 $L2	 live vars: $L2, $L1, $L4, 
;ensure(): $T6 has register r1 { r0->$L4 r1->$T6 r2->null r3->null }
;ensure(): $L2 gets register r3 { r0->$L4 r1->$T6 r2->null r3->$L2 }
move r1 r3
;Freeing unused variable $T6
;Spilling variable: $T6
move r1 $-14
;WRITEI $L2	 live vars: $L1, $L2, $L4, 
;ensure(): $L2 has register r3 { r0->$L4 r1->null r2->null r3->$L2 }
sys writei r3
;STOREI 0 $T7	 live vars: $T7, $L1, $L2, $L4, 
;ensure(): $T7 gets register r2 { r0->$L4 r1->null r2->$T7 r3->$L2 }
move 0 r2
;SUBI $T7 $L1 $T8	 live vars: $T8, $L2, $L4, $L1, 
;ensure(): $T7 has register r2 { r0->$L4 r1->null r2->$T7 r3->$L2 }
;ensure(): $L1 gets register r1 { r0->$L4 r1->$L1 r2->$T7 r3->$L2 }
;loading $L1 to register r1
move $-1 r1
;Switching owner of register r2 to $T8 { r0->$L4 r1->$L1 r2->$T7 r3->$L2 }
;Spilling variable: $T7
move r2 $-15
subi r1 r2
;ADDI $T8 $L2 $T9	 live vars: $T9, $L4, $L1, $L2, 
;ensure(): $T8 has register r2 { r0->$L4 r1->$L1 r2->$T8 r3->$L2 }
;ensure(): $L2 has register r3 { r0->$L4 r1->$L1 r2->$T8 r3->$L2 }
;Switching owner of register r2 to $T9 { r0->$L4 r1->$L1 r2->$T8 r3->$L2 }
;Spilling variable: $T8
move r2 $-16
addi r3 r2
;STOREI $T9 $L3	 live vars: $L3, $L4, $L1, $L2, 
;ensure(): $T9 has register r2 { r0->$L4 r1->$L1 r2->$T9 r3->$L2 }
;allocate() has to spill $L2
;Spilling variable: $L2
move r3 $-2
;ensure(): $L3 gets register r3 { r0->$L4 r1->$L1 r2->$T9 r3->$L3 }
move r2 r3
;Freeing unused variable $T9
;Spilling variable: $T9
move r2 $-17
;WRITEI $L3	 live vars: $L4, $L1, $L2, $L3, 
;ensure(): $L3 has register r3 { r0->$L4 r1->$L1 r2->null r3->$L3 }
sys writei r3
;STOREI 0 $T10	 live vars: $T10, $L4, $L1, $L2, $L3, 
;ensure(): $T10 gets register r2 { r0->$L4 r1->$L1 r2->$T10 r3->$L3 }
move 0 r2
;SUBI $T10 $L4 $T11	 live vars: $T11, $L1, $L2, $L3, 
;ensure(): $T10 has register r2 { r0->$L4 r1->$L1 r2->$T10 r3->$L3 }
;ensure(): $L4 has register r0 { r0->$L4 r1->$L1 r2->$T10 r3->$L3 }
;Switching owner of register r2 to $T11 { r0->$L4 r1->$L1 r2->$T10 r3->$L3 }
;Spilling variable: $T10
move r2 $-18
subi r0 r2
;Freeing unused variable $L4
;Spilling variable: $L4
move r0 $-4
;STOREI $T11 $L4	 live vars: $L4, $L1, $L2, $L3, 
;ensure(): $T11 has register r2 { r0->null r1->$L1 r2->$T11 r3->$L3 }
;ensure(): $L4 gets register r0 { r0->$L4 r1->$L1 r2->$T11 r3->$L3 }
move r2 r0
;Freeing unused variable $T11
;Spilling variable: $T11
move r2 $-19
;WRITEI $L4	 live vars: $L1, $L2, $L4, $L3, 
;ensure(): $L4 has register r0 { r0->$L4 r1->$L1 r2->null r3->$L3 }
sys writei r0
;ADDI $L1 $L2 $T12	 live vars: $L4, $L3, $T12, $L1, $L2, 
;ensure(): $L1 has register r1 { r0->$L4 r1->$L1 r2->null r3->$L3 }
;ensure(): $L2 gets register r2 { r0->$L4 r1->$L1 r2->$L2 r3->$L3 }
;loading $L2 to register r2
move $-2 r2
;Switching owner of register r1 to $T12 { r0->$L4 r1->$L1 r2->$L2 r3->$L3 }
addi r2 r1
;ADDI $L4 $L3 $T13	 live vars: $T12, $T13, $L3, $L4, $L1, $L2, 
;ensure(): $L4 has register r0 { r0->$L4 r1->$T12 r2->$L2 r3->$L3 }
;ensure(): $L3 has register r3 { r0->$L4 r1->$T12 r2->$L2 r3->$L3 }
;Switching owner of register r0 to $T13 { r0->$L4 r1->$T12 r2->$L2 r3->$L3 }
;Spilling variable: $L4
move r0 $-4
addi r3 r0
;MULTI $T12 $T13 $T14	 live vars: $T12, $L3, $L4, $L1, $T14, $L2, 
;ensure(): $T12 has register r1 { r0->$T13 r1->$T12 r2->$L2 r3->$L3 }
;ensure(): $T13 has register r0 { r0->$T13 r1->$T12 r2->$L2 r3->$L3 }
;Switching owner of register r1 to $T14 { r0->$T13 r1->$T12 r2->$L2 r3->$L3 }
;Spilling variable: $T12
move r1 $-20
muli r0 r1
;Freeing unused variable $T13
;Spilling variable: $T13
move r0 $-21
;STOREI $T12 $T15	 live vars: $T15, $L3, $L4, $L1, $T14, $L2, 
;ensure(): $T12 gets register r0 { r0->$T12 r1->$T14 r2->$L2 r3->$L3 }
;loading $T12 to register r0
move $-20 r0
;allocate() has to spill $L2
;ensure(): $T15 gets register r2 { r0->$T12 r1->$T14 r2->$T15 r3->$L3 }
move r0 r2
;Freeing unused variable $T12
;ADDI $T15 $L3 $T16	 live vars: $T16, $L4, $L1, $T14, $L2, 
;ensure(): $T15 has register r2 { r0->null r1->$T14 r2->$T15 r3->$L3 }
;ensure(): $L3 has register r3 { r0->null r1->$T14 r2->$T15 r3->$L3 }
;Switching owner of register r2 to $T16 { r0->null r1->$T14 r2->$T15 r3->$L3 }
;Spilling variable: $T15
move r2 $-23
addi r3 r2
;Freeing unused variable $L3
;Spilling variable: $L3
move r3 $-3
;ADDI $T16 $L4 $T17	 live vars: $T17, $L1, $T14, $L2, 
;ensure(): $T16 has register r2 { r0->null r1->$T14 r2->$T16 r3->null }
;ensure(): $L4 gets register r3 { r0->null r1->$T14 r2->$T16 r3->$L4 }
;loading $L4 to register r3
move $-4 r3
;Switching owner of register r2 to $T17 { r0->null r1->$T14 r2->$T16 r3->$L4 }
;Spilling variable: $T16
move r2 $-24
addi r3 r2
;Freeing unused variable $L4
;DIVI $T17 $L1 $T18	 live vars: $T14, $T18, $L2, 
;ensure(): $T17 has register r2 { r0->null r1->$T14 r2->$T17 r3->null }
;ensure(): $L1 gets register r3 { r0->null r1->$T14 r2->$T17 r3->$L1 }
;loading $L1 to register r3
move $-1 r3
;Switching owner of register r2 to $T18 { r0->null r1->$T14 r2->$T17 r3->$L1 }
;Spilling variable: $T17
move r2 $-25
divi r3 r2
;Freeing unused variable $L1
;SUBI $T14 $T18 $T19	 live vars: $T19, $L2, 
;ensure(): $T14 has register r1 { r0->null r1->$T14 r2->$T18 r3->null }
;ensure(): $T18 has register r2 { r0->null r1->$T14 r2->$T18 r3->null }
;Switching owner of register r1 to $T19 { r0->null r1->$T14 r2->$T18 r3->null }
;Spilling variable: $T14
move r1 $-22
subi r2 r1
;Freeing unused variable $T18
;Spilling variable: $T18
move r2 $-26
;STOREI $T19 $L1	 live vars: $L1, $L2, 
;ensure(): $T19 has register r1 { r0->null r1->$T19 r2->null r3->null }
;ensure(): $L1 gets register r3 { r0->null r1->$T19 r2->null r3->$L1 }
move r1 r3
;Freeing unused variable $T19
;Spilling variable: $T19
move r1 $-27
;WRITEI $L1	 live vars: $L1, $L2, 
;ensure(): $L1 has register r3 { r0->null r1->null r2->null r3->$L1 }
sys writei r3
;STOREI 10 $T20	 live vars: $L1, $T20, $L2, 
;ensure(): $T20 gets register r2 { r0->null r1->null r2->$T20 r3->$L1 }
move 10 r2
;ADDI $L1 $T20 $T21	 live vars: $T21, $L2, 
;ensure(): $L1 has register r3 { r0->null r1->null r2->$T20 r3->$L1 }
;ensure(): $T20 has register r2 { r0->null r1->null r2->$T20 r3->$L1 }
;Switching owner of register r3 to $T21 { r0->null r1->null r2->$T20 r3->$L1 }
;Spilling variable: $L1
move r3 $-1
addi r2 r3
;Freeing unused variable $T20
;Spilling variable: $T20
move r2 $-28
;STOREI $T21 $L1	 live vars: $L1, $L2, 
;ensure(): $T21 has register r3 { r0->null r1->null r2->null r3->$T21 }
;ensure(): $L1 gets register r2 { r0->null r1->null r2->$L1 r3->$T21 }
move r3 r2
;Freeing unused variable $T21
;Spilling variable: $T21
move r3 $-29
;WRITEI $L1	 live vars: $L2, $L1, 
;ensure(): $L1 has register r2 { r0->null r1->null r2->$L1 r3->null }
sys writei r2
;ADDI $L2 $L1 $T22	 live vars: $T22, 
;ensure(): $L2 gets register r3 { r0->null r1->null r2->$L1 r3->$L2 }
;loading $L2 to register r3
move $-2 r3
;ensure(): $L1 has register r2 { r0->null r1->null r2->$L1 r3->$L2 }
;Switching owner of register r3 to $T22 { r0->null r1->null r2->$L1 r3->$L2 }
addi r2 r3
;Freeing unused variable $L1
;Spilling variable: $L1
move r2 $-1
;STOREI 10 $T23	 live vars: $T22, $T23, 
;ensure(): $T23 gets register r2 { r0->null r1->null r2->$T23 r3->$T22 }
move 10 r2
;ADDI $T22 $T23 $T24	 live vars: $T24, 
;ensure(): $T22 has register r3 { r0->null r1->null r2->$T23 r3->$T22 }
;ensure(): $T23 has register r2 { r0->null r1->null r2->$T23 r3->$T22 }
;Switching owner of register r3 to $T24 { r0->null r1->null r2->$T23 r3->$T22 }
;Spilling variable: $T22
move r3 $-30
addi r2 r3
;Freeing unused variable $T23
;Spilling variable: $T23
move r2 $-31
;STOREI $T24 $L2	 live vars: $L2, 
;ensure(): $T24 has register r3 { r0->null r1->null r2->null r3->$T24 }
;ensure(): $L2 gets register r2 { r0->null r1->null r2->$L2 r3->$T24 }
move r3 r2
;Freeing unused variable $T24
;Spilling variable: $T24
move r3 $-32
;WRITEI $L2	 live vars: 
;ensure(): $L2 has register r2 { r0->null r1->null r2->$L2 r3->null }
sys writei r2
;Freeing unused variable $L2
;Spilling variable: $L2
move r2 $-2
;STOREI 0 $T25	 live vars: $T25, 
;ensure(): $T25 gets register r3 { r0->null r1->null r2->null r3->$T25 }
move 0 r3
;STOREI 10 $T26	 live vars: $T25, $T26, 
;ensure(): $T26 gets register r2 { r0->null r1->null r2->$T26 r3->$T25 }
move 10 r2
;SUBI $T25 $T26 $T27	 live vars: $T27, 
;ensure(): $T25 has register r3 { r0->null r1->null r2->$T26 r3->$T25 }
;ensure(): $T26 has register r2 { r0->null r1->null r2->$T26 r3->$T25 }
;Switching owner of register r3 to $T27 { r0->null r1->null r2->$T26 r3->$T25 }
;Spilling variable: $T25
move r3 $-33
subi r2 r3
;Freeing unused variable $T26
;Spilling variable: $T26
move r2 $-34
;STOREI $T27 $L3	 live vars: $L3, 
;ensure(): $T27 has register r3 { r0->null r1->null r2->null r3->$T27 }
;ensure(): $L3 gets register r2 { r0->null r1->null r2->$L3 r3->$T27 }
move r3 r2
;Freeing unused variable $T27
;Spilling variable: $T27
move r3 $-35
;WRITEI $L3	 live vars: 
;ensure(): $L3 has register r2 { r0->null r1->null r2->$L3 r3->null }
sys writei r2
;Freeing unused variable $L3
;Spilling variable: $L3
move r2 $-3
;STOREF 1.0 $T28	 live vars: $T28, 
;ensure(): $T28 gets register r3 { r0->null r1->null r2->null r3->$T28 }
move 1.0 r3
;STOREF $T28 $L5	 live vars: $L5, 
;ensure(): $T28 has register r3 { r0->null r1->null r2->null r3->$T28 }
;ensure(): $L5 gets register r2 { r0->null r1->null r2->$L5 r3->$T28 }
move r3 r2
;Freeing unused variable $T28
;Spilling variable: $T28
move r3 $-36
;STOREF 2.0 $T29	 live vars: $T29, $L5, 
;ensure(): $T29 gets register r3 { r0->null r1->null r2->$L5 r3->$T29 }
move 2.0 r3
;STOREF $T29 $L6	 live vars: $L5, $L6, 
;ensure(): $T29 has register r3 { r0->null r1->null r2->$L5 r3->$T29 }
;ensure(): $L6 gets register r1 { r0->null r1->$L6 r2->$L5 r3->$T29 }
move r3 r1
;Freeing unused variable $T29
;Spilling variable: $T29
move r3 $-37
;STOREF 3.14159 $T30	 live vars: $T30, $L5, $L6, 
;ensure(): $T30 gets register r3 { r0->null r1->$L6 r2->$L5 r3->$T30 }
move 3.14159 r3
;STOREF $T30 $L7	 live vars: $L5, $L7, $L6, 
;ensure(): $T30 has register r3 { r0->null r1->$L6 r2->$L5 r3->$T30 }
;ensure(): $L7 gets register r0 { r0->$L7 r1->$L6 r2->$L5 r3->$T30 }
move r3 r0
;Freeing unused variable $T30
;Spilling variable: $T30
move r3 $-38
;WRITEF $L5	 live vars: $L7, $L6, 
;ensure(): $L5 has register r2 { r0->$L7 r1->$L6 r2->$L5 r3->null }
sys writer r2
;Freeing unused variable $L5
;Spilling variable: $L5
move r2 $-5
;WRITEF $L7	 live vars: $L6, $L7, 
;ensure(): $L7 has register r0 { r0->$L7 r1->$L6 r2->null r3->null }
sys writer r0
;WRITEF $L6	 live vars: $L7, $L6, 
;ensure(): $L6 has register r1 { r0->$L7 r1->$L6 r2->null r3->null }
sys writer r1
;STOREF 2.0 $T31	 live vars: $L7, $T31, $L6, 
;ensure(): $T31 gets register r3 { r0->$L7 r1->$L6 r2->null r3->$T31 }
move 2.0 r3
;DIVF $L7 $T31 $T32	 live vars: $T32, $L7, $L6, 
;ensure(): $L7 has register r0 { r0->$L7 r1->$L6 r2->null r3->$T31 }
;ensure(): $T31 has register r3 { r0->$L7 r1->$L6 r2->null r3->$T31 }
;Switching owner of register r0 to $T32 { r0->$L7 r1->$L6 r2->null r3->$T31 }
;Spilling variable: $L7
move r0 $-7
divr r3 r0
;Freeing unused variable $T31
;Spilling variable: $T31
move r3 $-39
;STOREF $T32 $L5	 live vars: $L7, $L6, $L5, 
;ensure(): $T32 has register r0 { r0->$T32 r1->$L6 r2->null r3->null }
;ensure(): $L5 gets register r3 { r0->$T32 r1->$L6 r2->null r3->$L5 }
move r0 r3
;Freeing unused variable $T32
;Spilling variable: $T32
move r0 $-40
;DIVF $L7 $L6 $T33	 live vars: $T33, $L5, $L7, 
;ensure(): $L7 gets register r2 { r0->null r1->$L6 r2->$L7 r3->$L5 }
;loading $L7 to register r2
move $-7 r2
;ensure(): $L6 has register r1 { r0->null r1->$L6 r2->$L7 r3->$L5 }
;Switching owner of register r2 to $T33 { r0->null r1->$L6 r2->$L7 r3->$L5 }
divr r1 r2
;Freeing unused variable $L6
;Spilling variable: $L6
move r1 $-6
;STOREF $T33 $L6	 live vars: $L5, $L6, $L7, 
;ensure(): $T33 has register r2 { r0->null r1->null r2->$T33 r3->$L5 }
;ensure(): $L6 gets register r1 { r0->null r1->$L6 r2->$T33 r3->$L5 }
move r2 r1
;Freeing unused variable $T33
;Spilling variable: $T33
move r2 $-41
;WRITEF $L5	 live vars: $L6, $L5, $L7, 
;ensure(): $L5 has register r3 { r0->null r1->$L6 r2->null r3->$L5 }
sys writer r3
;WRITEF $L6	 live vars: $L5, $L6, $L7, 
;ensure(): $L6 has register r1 { r0->null r1->$L6 r2->null r3->$L5 }
sys writer r1
;ADDF $L5 $L6 $T34	 live vars: $T34, $L7, 
;ensure(): $L5 has register r3 { r0->null r1->$L6 r2->null r3->$L5 }
;ensure(): $L6 has register r1 { r0->null r1->$L6 r2->null r3->$L5 }
;Switching owner of register r3 to $T34 { r0->null r1->$L6 r2->null r3->$L5 }
;Spilling variable: $L5
move r3 $-5
addr r1 r3
;Freeing unused variable $L6
;Spilling variable: $L6
move r1 $-6
;ADDF $T34 $L7 $T35	 live vars: $T35, $L7, 
;ensure(): $T34 has register r3 { r0->null r1->null r2->null r3->$T34 }
;ensure(): $L7 gets register r2 { r0->null r1->null r2->$L7 r3->$T34 }
;loading $L7 to register r2
move $-7 r2
;Switching owner of register r3 to $T35 { r0->null r1->null r2->$L7 r3->$T34 }
;Spilling variable: $T34
move r3 $-42
addr r2 r3
;DIVF $T35 $L7 $T36	 live vars: $T36, $L7, 
;ensure(): $T35 has register r3 { r0->null r1->null r2->$L7 r3->$T35 }
;ensure(): $L7 has register r2 { r0->null r1->null r2->$L7 r3->$T35 }
;Switching owner of register r3 to $T36 { r0->null r1->null r2->$L7 r3->$T35 }
;Spilling variable: $T35
move r3 $-43
divr r2 r3
;STOREF $T36 $L8	 live vars: $L8, $L7, 
;ensure(): $T36 has register r3 { r0->null r1->null r2->$L7 r3->$T36 }
;ensure(): $L8 gets register r1 { r0->null r1->$L8 r2->$L7 r3->$T36 }
move r3 r1
;Freeing unused variable $T36
;Spilling variable: $T36
move r3 $-44
;WRITEF $L8	 live vars: $L8, $L7, 
;ensure(): $L8 has register r1 { r0->null r1->$L8 r2->$L7 r3->null }
sys writer r1
;MULTF $L8 $L8 $T37	 live vars: $T37, $L7, 
;ensure(): $L8 has register r1 { r0->null r1->$L8 r2->$L7 r3->null }
;ensure(): $L8 has register r1 { r0->null r1->$L8 r2->$L7 r3->null }
;Switching owner of register r1 to $T37 { r0->null r1->$L8 r2->$L7 r3->null }
;Spilling variable: $L8
move r1 $-8
mulr r1 r1
;STOREF $T37 $L8	 live vars: $L8, $L7, 
;ensure(): $T37 has register r1 { r0->null r1->$T37 r2->$L7 r3->null }
;ensure(): $L8 gets register r3 { r0->null r1->$T37 r2->$L7 r3->$L8 }
move r1 r3
;Freeing unused variable $T37
;Spilling variable: $T37
move r1 $-45
;WRITEF $L8	 live vars: $L8, $L7, 
;ensure(): $L8 has register r3 { r0->null r1->null r2->$L7 r3->$L8 }
sys writer r3
;ADDF $L8 $L7 $T38	 live vars: $T38, $L8, $L7, 
;ensure(): $L8 has register r3 { r0->null r1->null r2->$L7 r3->$L8 }
;ensure(): $L7 has register r2 { r0->null r1->null r2->$L7 r3->$L8 }
;Switching owner of register r3 to $T38 { r0->null r1->null r2->$L7 r3->$L8 }
;Spilling variable: $L8
move r3 $-8
addr r2 r3
;ADDF $T38 $L8 $T39	 live vars: $L8, $T39, $L7, 
;ensure(): $T38 has register r3 { r0->null r1->null r2->$L7 r3->$T38 }
;ensure(): $L8 gets register r1 { r0->null r1->$L8 r2->$L7 r3->$T38 }
;loading $L8 to register r1
move $-8 r1
;Switching owner of register r3 to $T39 { r0->null r1->$L8 r2->$L7 r3->$T38 }
;Spilling variable: $T38
move r3 $-46
addr r1 r3
;STOREF 2.0 $T40	 live vars: $L8, $T40, $T39, $L7, 
;ensure(): $T40 gets register r0 { r0->$T40 r1->$L8 r2->$L7 r3->$T39 }
move 2.0 r0
;DIVF $L8 $T40 $T41	 live vars: $T39, $T41, $L7, 
;ensure(): $L8 has register r1 { r0->$T40 r1->$L8 r2->$L7 r3->$T39 }
;ensure(): $T40 has register r0 { r0->$T40 r1->$L8 r2->$L7 r3->$T39 }
;Switching owner of register r1 to $T41 { r0->$T40 r1->$L8 r2->$L7 r3->$T39 }
divr r0 r1
;Freeing unused variable $T40
;Spilling variable: $T40
move r0 $-48
;ADDF $T39 $T41 $T42	 live vars: $L7, $T42, 
;ensure(): $T39 has register r3 { r0->null r1->$T41 r2->$L7 r3->$T39 }
;ensure(): $T41 has register r1 { r0->null r1->$T41 r2->$L7 r3->$T39 }
;Switching owner of register r3 to $T42 { r0->null r1->$T41 r2->$L7 r3->$T39 }
;Spilling variable: $T39
move r3 $-47
addr r1 r3
;Freeing unused variable $T41
;Spilling variable: $T41
move r1 $-49
;STOREF 4.0 $T43	 live vars: $L7, $T43, $T42, 
;ensure(): $T43 gets register r1 { r0->null r1->$T43 r2->$L7 r3->$T42 }
move 4.0 r1
;DIVF $L7 $T43 $T44	 live vars: $T42, $T44, $L7, 
;ensure(): $L7 has register r2 { r0->null r1->$T43 r2->$L7 r3->$T42 }
;ensure(): $T43 has register r1 { r0->null r1->$T43 r2->$L7 r3->$T42 }
;Switching owner of register r2 to $T44 { r0->null r1->$T43 r2->$L7 r3->$T42 }
divr r1 r2
;Freeing unused variable $T43
;Spilling variable: $T43
move r1 $-51
;ADDF $T42 $T44 $T45	 live vars: $L7, $T45, 
;ensure(): $T42 has register r3 { r0->null r1->null r2->$T44 r3->$T42 }
;ensure(): $T44 has register r2 { r0->null r1->null r2->$T44 r3->$T42 }
;Switching owner of register r3 to $T45 { r0->null r1->null r2->$T44 r3->$T42 }
;Spilling variable: $T42
move r3 $-50
addr r2 r3
;Freeing unused variable $T44
;Spilling variable: $T44
move r2 $-52
;STOREF 5.0 $T46	 live vars: $L7, $T46, $T45, 
;ensure(): $T46 gets register r2 { r0->null r1->null r2->$T46 r3->$T45 }
move 5.0 r2
;DIVF $L7 $T46 $T47	 live vars: $T45, $T47, $L7, 
;ensure(): $L7 gets register r1 { r0->null r1->$L7 r2->$T46 r3->$T45 }
;loading $L7 to register r1
move $-7 r1
;ensure(): $T46 has register r2 { r0->null r1->$L7 r2->$T46 r3->$T45 }
;Switching owner of register r1 to $T47 { r0->null r1->$L7 r2->$T46 r3->$T45 }
divr r2 r1
;Freeing unused variable $T46
;Spilling variable: $T46
move r2 $-54
;ADDF $T45 $T47 $T48	 live vars: $L7, $T48, 
;ensure(): $T45 has register r3 { r0->null r1->$T47 r2->null r3->$T45 }
;ensure(): $T47 has register r1 { r0->null r1->$T47 r2->null r3->$T45 }
;Switching owner of register r3 to $T48 { r0->null r1->$T47 r2->null r3->$T45 }
;Spilling variable: $T45
move r3 $-53
addr r1 r3
;Freeing unused variable $T47
;Spilling variable: $T47
move r1 $-55
;STOREF 6.0 $T49	 live vars: $L7, $T49, $T48, 
;ensure(): $T49 gets register r2 { r0->null r1->null r2->$T49 r3->$T48 }
move 6.0 r2
;DIVF $L7 $T49 $T50	 live vars: $T48, $T50, $L7, 
;ensure(): $L7 gets register r1 { r0->null r1->$L7 r2->$T49 r3->$T48 }
;loading $L7 to register r1
move $-7 r1
;ensure(): $T49 has register r2 { r0->null r1->$L7 r2->$T49 r3->$T48 }
;Switching owner of register r1 to $T50 { r0->null r1->$L7 r2->$T49 r3->$T48 }
divr r2 r1
;Freeing unused variable $T49
;Spilling variable: $T49
move r2 $-57
;ADDF $T48 $T50 $T51	 live vars: $L7, $T51, 
;ensure(): $T48 has register r3 { r0->null r1->$T50 r2->null r3->$T48 }
;ensure(): $T50 has register r1 { r0->null r1->$T50 r2->null r3->$T48 }
;Switching owner of register r3 to $T51 { r0->null r1->$T50 r2->null r3->$T48 }
;Spilling variable: $T48
move r3 $-56
addr r1 r3
;Freeing unused variable $T50
;Spilling variable: $T50
move r1 $-58
;STOREF 7.0 $T52	 live vars: $L7, $T52, $T51, 
;ensure(): $T52 gets register r2 { r0->null r1->null r2->$T52 r3->$T51 }
move 7.0 r2
;DIVF $L7 $T52 $T53	 live vars: $T51, $T53, 
;ensure(): $L7 gets register r1 { r0->null r1->$L7 r2->$T52 r3->$T51 }
;loading $L7 to register r1
move $-7 r1
;ensure(): $T52 has register r2 { r0->null r1->$L7 r2->$T52 r3->$T51 }
;Switching owner of register r1 to $T53 { r0->null r1->$L7 r2->$T52 r3->$T51 }
divr r2 r1
;Freeing unused variable $T52
;Spilling variable: $T52
move r2 $-60
;ADDF $T51 $T53 $T54	 live vars: $T54, 
;ensure(): $T51 has register r3 { r0->null r1->$T53 r2->null r3->$T51 }
;ensure(): $T53 has register r1 { r0->null r1->$T53 r2->null r3->$T51 }
;Switching owner of register r3 to $T54 { r0->null r1->$T53 r2->null r3->$T51 }
;Spilling variable: $T51
move r3 $-59
addr r1 r3
;Freeing unused variable $T53
;Spilling variable: $T53
move r1 $-61
;STOREF $T54 $L8	 live vars: $L8, 
;ensure(): $T54 has register r3 { r0->null r1->null r2->null r3->$T54 }
;ensure(): $L8 gets register r2 { r0->null r1->null r2->$L8 r3->$T54 }
move r3 r2
;Freeing unused variable $T54
;Spilling variable: $T54
move r3 $-62
;WRITEF $L8	 live vars: 
;ensure(): $L8 has register r2 { r0->null r1->null r2->$L8 r3->null }
sys writer r2
;Freeing unused variable $L8
;Spilling variable: $L8
move r2 $-8
;RET	 live vars: 
unlnk
ret
;Spilling registers at the end of the Basic Block
end

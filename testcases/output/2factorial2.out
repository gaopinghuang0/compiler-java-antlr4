;IR code
;LABEL factorial
;LINK
;STOREI 1 $T1
;NE $P1 $T1 label1
;STOREI 1 $T2
;STOREI $T2 $R
;RET
;JUMP label2
;LABEL label1
;STOREI 4 $T3
;STOREI $T3 c
;WRITEI c
;WRITES eol
;STOREI 1 $T4
;SUBI $P1 $T4 $T5
;PUSH 
;PUSH $T5
;JSR factorial
;POP 
;POP $T6
;STOREI $T6 $L2
;MULTI $L2 $P1 $T7
;STOREI $T7 $L1
;JUMP label2
;LABEL label2
;STOREI $L1 $R
;RET

;LABEL main
;LINK
;WRITES input
;READI $L1
;STOREI 1 $T1
;NE $L1 $T1 label3
;STOREI 1 $T2
;STOREI $T2 $L2
;JUMP label4
;LABEL label3
;STOREI 1 $T3
;LE $L1 $T3 label5
;STOREI 3 $T4
;STOREI $T4 c
;PUSH 
;PUSH $L1
;JSR factorial
;POP 
;POP $T5
;STOREI $T5 $L2
;WRITEI c
;WRITES eol
;STOREI c $L1
;JUMP label6
;LABEL label5
;STOREI 0 $T6
;STOREI $T6 $L2
;JUMP label6
;LABEL label6
;JUMP label4
;LABEL label4
;WRITEI $L2
;WRITES eol
;STOREI 0 $T7
;STOREI $T7 $R
;RET

;tiny code
str input "Please enter an integer number: "
str eol "\n"
var c
var d
push
push r0
push r1
push r2
push r3
jsr main
sys halt
;LABEL factorial	 live vars: $P1, eol, $L1, 
label factorial
;LINK	 live vars: $P1, eol, $L1, 
link 9
;STOREI 1 $T1	 live vars: $P1, $T1, eol, $L1, 
;ensure(): $T1 gets register r3 { r0->null r1->null r2->null r3->$T1 }
move 1 r3
;NE $P1 $T1 label1	 live vars: eol, $P1, $L1, 
;ensure(): $P1 gets register r2 { r0->null r1->null r2->$P1 r3->$T1 }
;loading $P1 to register r2
move $6 r2
;ensure(): $T1 has register r3 { r0->null r1->null r2->$P1 r3->$T1 }
cmpi r2 r3
;Freeing unused variable $T1
;Spilling variable: $T1
move r3 $-3
;Spilling registers at the end of the Basic Block
jne label1
;STOREI 1 $T2	 live vars: $T2, $L1, 
;ensure(): $T2 gets register r3 { r0->null r1->null r2->null r3->$T2 }
move 1 r3
;STOREI $T2 $R	 live vars: $L1, 
;ensure(): $T2 has register r3 { r0->null r1->null r2->null r3->$T2 }
move r3 $7
;Freeing unused variable $T2
;Spilling variable: $T2
move r3 $-4
;RET	 live vars: $L1, 
unlnk
ret
;JUMP label2	 live vars: $L1, 
;Spilling registers at the end of the Basic Block
jmp label2
;LABEL label1	 live vars: eol, $P1, 
label label1
;STOREI 4 $T3	 live vars: $T3, eol, $P1, 
;ensure(): $T3 gets register r3 { r0->null r1->null r2->null r3->$T3 }
move 4 r3
;STOREI $T3 c	 live vars: c, eol, $P1, 
;ensure(): $T3 has register r3 { r0->null r1->null r2->null r3->$T3 }
;ensure(): c gets register r2 { r0->null r1->null r2->c r3->$T3 }
move r3 r2
;Freeing unused variable $T3
;Spilling variable: $T3
move r3 $-5
;WRITEI c	 live vars: eol, $P1, 
;ensure(): c has register r2 { r0->null r1->null r2->c r3->null }
sys writei r2
;Freeing unused variable c
;Spilling variable: c
move r2 c
;WRITES eol	 live vars: $P1, 
sys writes eol
;STOREI 1 $T4	 live vars: $P1, $T4, 
;ensure(): $T4 gets register r3 { r0->null r1->null r2->null r3->$T4 }
move 1 r3
;SUBI $P1 $T4 $T5	 live vars: $T5, $P1, 
;ensure(): $P1 gets register r2 { r0->null r1->null r2->$P1 r3->$T4 }
;loading $P1 to register r2
move $6 r2
;ensure(): $T4 has register r3 { r0->null r1->null r2->$P1 r3->$T4 }
;Switching owner of register r2 to $T5 { r0->null r1->null r2->$P1 r3->$T4 }
subi r3 r2
;Freeing unused variable $T4
;Spilling variable: $T4
move r3 $-6
;PUSH 	 live vars: $T5, $P1, 
push 
;PUSH $T5	 live vars: $P1, 
;ensure(): $T5 has register r2 { r0->null r1->null r2->$T5 r3->null }
push r2
;Freeing unused variable $T5
;Spilling variable: $T5
move r2 $-7
;JSR factorial	 live vars: $P1, 
push r0
push r1
push r2
push r3
jsr factorial
pop r3
pop r2
pop r1
pop r0
;POP 	 live vars: $P1, 
pop 
;POP $T6	 live vars: $T6, $P1, 
;ensure(): $T6 gets register r3 { r0->null r1->null r2->null r3->$T6 }
pop r3
;STOREI $T6 $L2	 live vars: $L2, $P1, 
;ensure(): $T6 has register r3 { r0->null r1->null r2->null r3->$T6 }
;ensure(): $L2 gets register r2 { r0->null r1->null r2->$L2 r3->$T6 }
move r3 r2
;Freeing unused variable $T6
;Spilling variable: $T6
move r3 $-8
;MULTI $L2 $P1 $T7	 live vars: $T7, 
;ensure(): $L2 has register r2 { r0->null r1->null r2->$L2 r3->null }
;ensure(): $P1 gets register r3 { r0->null r1->null r2->$L2 r3->$P1 }
;loading $P1 to register r3
move $6 r3
;Switching owner of register r2 to $T7 { r0->null r1->null r2->$L2 r3->$P1 }
;Spilling variable: $L2
move r2 $-2
muli r3 r2
;Freeing unused variable $P1
;STOREI $T7 $L1	 live vars: $L1, 
;ensure(): $T7 has register r2 { r0->null r1->null r2->$T7 r3->null }
;ensure(): $L1 gets register r3 { r0->null r1->null r2->$T7 r3->$L1 }
move r2 r3
;Freeing unused variable $T7
;Spilling variable: $T7
move r2 $-9
;JUMP label2	 live vars: $L1, 
;Spilling registers at the end of the Basic Block
;Spilling variable: $L1
move r3 $-1
jmp label2
;LABEL label2	 live vars: $L1, 
label label2
;STOREI $L1 $R	 live vars: 
;ensure(): $L1 gets register r3 { r0->null r1->null r2->null r3->$L1 }
;loading $L1 to register r3
move $-1 r3
move r3 $7
;Freeing unused variable $L1
;RET	 live vars: 
unlnk
ret
;Spilling registers at the end of the Basic Block
;LABEL main	 live vars: input, eol, 
label main
;LINK	 live vars: input, eol, 
link 9
;WRITES input	 live vars: eol, 
sys writes input
;READI $L1	 live vars: $L1, eol, 
;ensure(): $L1 gets register r3 { r0->null r1->null r2->null r3->$L1 }
sys readi r3
;STOREI 1 $T1	 live vars: $L1, $T1, eol, 
;ensure(): $T1 gets register r2 { r0->null r1->null r2->$T1 r3->$L1 }
move 1 r2
;NE $L1 $T1 label3	 live vars: $L1, eol, 
;ensure(): $L1 has register r3 { r0->null r1->null r2->$T1 r3->$L1 }
;ensure(): $T1 has register r2 { r0->null r1->null r2->$T1 r3->$L1 }
cmpi r3 r2
;Freeing unused variable $T1
;Spilling variable: $T1
move r2 $-3
;Spilling registers at the end of the Basic Block
;Spilling variable: $L1
move r3 $-1
jne label3
;STOREI 1 $T2	 live vars: $T2, eol, 
;ensure(): $T2 gets register r3 { r0->null r1->null r2->null r3->$T2 }
move 1 r3
;STOREI $T2 $L2	 live vars: $L2, eol, 
;ensure(): $T2 has register r3 { r0->null r1->null r2->null r3->$T2 }
;ensure(): $L2 gets register r2 { r0->null r1->null r2->$L2 r3->$T2 }
move r3 r2
;Freeing unused variable $T2
;Spilling variable: $T2
move r3 $-4
;JUMP label4	 live vars: $L2, eol, 
;Spilling registers at the end of the Basic Block
;Spilling variable: $L2
move r2 $-2
jmp label4
;LABEL label3	 live vars: $L1, eol, 
label label3
;STOREI 1 $T3	 live vars: $L1, $T3, eol, 
;ensure(): $T3 gets register r3 { r0->null r1->null r2->null r3->$T3 }
move 1 r3
;LE $L1 $T3 label5	 live vars: eol, $L1, 
;ensure(): $L1 gets register r2 { r0->null r1->null r2->$L1 r3->$T3 }
;loading $L1 to register r2
move $-1 r2
;ensure(): $T3 has register r3 { r0->null r1->null r2->$L1 r3->$T3 }
cmpi r2 r3
;Freeing unused variable $T3
;Spilling variable: $T3
move r3 $-5
;Spilling registers at the end of the Basic Block
jle label5
;STOREI 3 $T4	 live vars: $T4, $L1, eol, 
;ensure(): $T4 gets register r3 { r0->null r1->null r2->null r3->$T4 }
move 3 r3
;STOREI $T4 c	 live vars: $L1, c, eol, 
;ensure(): $T4 has register r3 { r0->null r1->null r2->null r3->$T4 }
;ensure(): c gets register r2 { r0->null r1->null r2->c r3->$T4 }
move r3 r2
;Freeing unused variable $T4
;Spilling variable: $T4
move r3 $-6
;PUSH 	 live vars: $L1, c, eol, 
push 
;PUSH $L1	 live vars: c, eol, 
;ensure(): $L1 gets register r3 { r0->null r1->null r2->c r3->$L1 }
;loading $L1 to register r3
move $-1 r3
push r3
;Freeing unused variable $L1
;JSR factorial	 live vars: c, eol, 
push r0
push r1
push r2
push r3
jsr factorial
pop r3
pop r2
pop r1
pop r0
;POP 	 live vars: c, eol, 
pop 
;POP $T5	 live vars: $T5, c, eol, 
;ensure(): $T5 gets register r3 { r0->null r1->null r2->c r3->$T5 }
pop r3
;STOREI $T5 $L2	 live vars: c, eol, $L2, 
;ensure(): $T5 has register r3 { r0->null r1->null r2->c r3->$T5 }
;ensure(): $L2 gets register r1 { r0->null r1->$L2 r2->c r3->$T5 }
move r3 r1
;Freeing unused variable $T5
;Spilling variable: $T5
move r3 $-7
;WRITEI c	 live vars: eol, c, $L2, 
;ensure(): c has register r2 { r0->null r1->$L2 r2->c r3->null }
sys writei r2
;WRITES eol	 live vars: c, $L2, eol, 
sys writes eol
;STOREI c $L1	 live vars: $L2, eol, 
;ensure(): c has register r2 { r0->null r1->$L2 r2->c r3->null }
;ensure(): $L1 gets register r3 { r0->null r1->$L2 r2->c r3->$L1 }
move r2 r3
;Freeing unused variable c
;Spilling variable: c
move r2 c
;Freeing unused variable $L1
;Spilling variable: $L1
move r3 $-1
;JUMP label6	 live vars: $L2, eol, 
;Spilling registers at the end of the Basic Block
;Spilling variable: $L2
move r1 $-2
jmp label6
;LABEL label5	 live vars: eol, 
label label5
;STOREI 0 $T6	 live vars: $T6, eol, 
;ensure(): $T6 gets register r3 { r0->null r1->null r2->null r3->$T6 }
move 0 r3
;STOREI $T6 $L2	 live vars: $L2, eol, 
;ensure(): $T6 has register r3 { r0->null r1->null r2->null r3->$T6 }
;ensure(): $L2 gets register r2 { r0->null r1->null r2->$L2 r3->$T6 }
move r3 r2
;Freeing unused variable $T6
;Spilling variable: $T6
move r3 $-8
;JUMP label6	 live vars: $L2, eol, 
;Spilling registers at the end of the Basic Block
;Spilling variable: $L2
move r2 $-2
jmp label6
;LABEL label6	 live vars: $L2, eol, 
label label6
;JUMP label4	 live vars: $L2, eol, 
;Spilling registers at the end of the Basic Block
jmp label4
;LABEL label4	 live vars: $L2, eol, 
label label4
;WRITEI $L2	 live vars: eol, 
;ensure(): $L2 gets register r3 { r0->null r1->null r2->null r3->$L2 }
;loading $L2 to register r3
move $-2 r3
sys writei r3
;Freeing unused variable $L2
;WRITES eol	 live vars: 
sys writes eol
;STOREI 0 $T7	 live vars: $T7, 
;ensure(): $T7 gets register r3 { r0->null r1->null r2->null r3->$T7 }
move 0 r3
;STOREI $T7 $R	 live vars: 
;ensure(): $T7 has register r3 { r0->null r1->null r2->null r3->$T7 }
move r3 $6
;Freeing unused variable $T7
;Spilling variable: $T7
move r3 $-9
;RET	 live vars: 
unlnk
ret
;Spilling registers at the end of the Basic Block
end
